//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34014
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RouteCard.localhost {
    
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="RouteCard.localhost", ConfigurationName="IMockService")]
public interface IMockService {
    
    // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Wrappernamespace (http://tempuri.org/) von Nachricht "GetLotRequest" nicht mit dem Standardwert (RouteCard.localhost) übereinstimmt.
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockService/GetLot", ReplyAction="http://tempuri.org/IMockService/GetLotResponse")]
    GetLotResponse GetLot(GetLotRequest request);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMockService/GetLot", ReplyAction="http://tempuri.org/IMockService/GetLotResponse")]
    System.IAsyncResult BeginGetLot(GetLotRequest request, System.AsyncCallback callback, object asyncState);
    
    GetLotResponse EndGetLot(System.IAsyncResult result);
    
    // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Wrappernamespace (http://tempuri.org/) von Nachricht "IsValidUserRequest" nicht mit dem Standardwert (RouteCard.localhost) übereinstimmt.
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockService/IsValidUser", ReplyAction="http://tempuri.org/IMockService/IsValidUserResponse")]
    IsValidUserResponse IsValidUser(IsValidUserRequest request);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMockService/IsValidUser", ReplyAction="http://tempuri.org/IMockService/IsValidUserResponse")]
    System.IAsyncResult BeginIsValidUser(IsValidUserRequest request, System.AsyncCallback callback, object asyncState);
    
    IsValidUserResponse EndIsValidUser(System.IAsyncResult result);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetLot", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class GetLotRequest {
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public string lotNumber;
    
    public GetLotRequest() {
    }
    
    public GetLotRequest(string lotNumber) {
        this.lotNumber = lotNumber;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetLotResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class GetLotResponse {
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public App.Mock.WebService.Lot[] GetLotResult;
    
    public GetLotResponse() {
    }
    
    public GetLotResponse(App.Mock.WebService.Lot[] GetLotResult) {
        this.GetLotResult = GetLotResult;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="IsValidUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class IsValidUserRequest {
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public string Username;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
    public string Password;
    
    public IsValidUserRequest() {
    }
    
    public IsValidUserRequest(string Username, string Password) {
        this.Username = Username;
        this.Password = Password;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="IsValidUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class IsValidUserResponse {
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public bool IsValidUserResult;
    
    public IsValidUserResponse() {
    }
    
    public IsValidUserResponse(bool IsValidUserResult) {
        this.IsValidUserResult = IsValidUserResult;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMockServiceChannel : IMockService, System.ServiceModel.IClientChannel {
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MockServiceClient : System.ServiceModel.ClientBase<IMockService>, IMockService {
    
    public MockServiceClient() {
    }
    
    public MockServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName) {
    }
    
    public MockServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress) {
    }
    
    public MockServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress) {
    }
    
    public MockServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress) {
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    GetLotResponse IMockService.GetLot(GetLotRequest request) {
        return base.Channel.GetLot(request);
    }
    
    public App.Mock.WebService.Lot[] GetLot(string lotNumber) {
        GetLotRequest inValue = new GetLotRequest();
        inValue.lotNumber = lotNumber;
        GetLotResponse retVal = ((IMockService)(this)).GetLot(inValue);
        return retVal.GetLotResult;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IMockService.BeginGetLot(GetLotRequest request, System.AsyncCallback callback, object asyncState) {
        return base.Channel.BeginGetLot(request, callback, asyncState);
    }
    
    public System.IAsyncResult BeginGetLot(string lotNumber, System.AsyncCallback callback, object asyncState) {
        GetLotRequest inValue = new GetLotRequest();
        inValue.lotNumber = lotNumber;
        return ((IMockService)(this)).BeginGetLot(inValue, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    GetLotResponse IMockService.EndGetLot(System.IAsyncResult result) {
        return base.Channel.EndGetLot(result);
    }
    
    public App.Mock.WebService.Lot[] EndGetLot(System.IAsyncResult result) {
        GetLotResponse retVal = ((IMockService)(this)).EndGetLot(result);
        return retVal.GetLotResult;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    IsValidUserResponse IMockService.IsValidUser(IsValidUserRequest request) {
        return base.Channel.IsValidUser(request);
    }
    
    public bool IsValidUser(string Username, string Password) {
        IsValidUserRequest inValue = new IsValidUserRequest();
        inValue.Username = Username;
        inValue.Password = Password;
        IsValidUserResponse retVal = ((IMockService)(this)).IsValidUser(inValue);
        return retVal.IsValidUserResult;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IMockService.BeginIsValidUser(IsValidUserRequest request, System.AsyncCallback callback, object asyncState) {
        return base.Channel.BeginIsValidUser(request, callback, asyncState);
    }
    
    public System.IAsyncResult BeginIsValidUser(string Username, string Password, System.AsyncCallback callback, object asyncState) {
        IsValidUserRequest inValue = new IsValidUserRequest();
        inValue.Username = Username;
        inValue.Password = Password;
        return ((IMockService)(this)).BeginIsValidUser(inValue, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    IsValidUserResponse IMockService.EndIsValidUser(System.IAsyncResult result) {
        return base.Channel.EndIsValidUser(result);
    }
    
    public bool EndIsValidUser(System.IAsyncResult result) {
        IsValidUserResponse retVal = ((IMockService)(this)).EndIsValidUser(result);
        return retVal.IsValidUserResult;
    }
}
namespace App.Mock.WebService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lot", Namespace="http://schemas.datacontract.org/2004/07/App.Mock.WebService")]
    public partial class Lot : object, System.Runtime.Serialization.IExtensibleDataObject {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ColorField;
        
        private string CommentField;
        
        private string EquipmentField;
        
        private string Hold_CategoryField;
        
        private string Hold_NameField;
        
        private string Hold_NoteField;
        
        private string Hold_ReasonField;
        
        private string Hold_ReleaseField;
        
        private int OperField;
        
        private string Oper_DescField;
        
        private string OperatorField;
        
        private string Planed_HoldField;
        
        private string ProcessField;
        
        private string Process_NrField;
        
        private string RouteField;
        
        private string SpecificationField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                this.ColorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                this.CommentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Equipment {
            get {
                return this.EquipmentField;
            }
            set {
                this.EquipmentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hold_Category {
            get {
                return this.Hold_CategoryField;
            }
            set {
                this.Hold_CategoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hold_Name {
            get {
                return this.Hold_NameField;
            }
            set {
                this.Hold_NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hold_Note {
            get {
                return this.Hold_NoteField;
            }
            set {
                this.Hold_NoteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hold_Reason {
            get {
                return this.Hold_ReasonField;
            }
            set {
                this.Hold_ReasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hold_Release {
            get {
                return this.Hold_ReleaseField;
            }
            set {
                this.Hold_ReleaseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Oper {
            get {
                return this.OperField;
            }
            set {
                this.OperField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Oper_Desc {
            get {
                return this.Oper_DescField;
            }
            set {
                this.Oper_DescField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                this.OperatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Planed_Hold {
            get {
                return this.Planed_HoldField;
            }
            set {
                this.Planed_HoldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Process {
            get {
                return this.ProcessField;
            }
            set {
                this.ProcessField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Process_Nr {
            get {
                return this.Process_NrField;
            }
            set {
                this.Process_NrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Route {
            get {
                return this.RouteField;
            }
            set {
                this.RouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Specification {
            get {
                return this.SpecificationField;
            }
            set {
                this.SpecificationField = value;
            }
        }
    }
}
